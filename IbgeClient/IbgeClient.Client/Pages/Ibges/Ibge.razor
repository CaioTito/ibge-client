@page "/ibge"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<PageTitle>IBGE</PageTitle>

@if (_listPlaces is null)
{
    <div class="container">
        <div class="form-inline d-flex align-items-center">
            <em>Não foi possivel carregar os dados...</em>
            <button class="btn btn-outline-info m-2" @onclick="OnInitializedAsync">Refresh</button>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="form-inline d-flex align-items-center">
            <a class="btn btn-success me-2" href="create-ibge" style="width: 200px; height: 37px;"><Icon Name="IconName.PlusSquare" class="me-1" />Create Place</a>
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind="@data">
            <button class="btn btn-outline-info" style="width: 200px; height: 37px;" @onclick="() => Search(data)"><Icon Name="IconName.Search" class="me-1" />Search</button>
        </div>
    </div>

    <table class="table mt-4">
        <thead>
            <tr>
                <th>City</th>
                <th>State</th>
                <th>CodeIbge</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _listPlaces)
            {
                <tr>
                    <td>@item.City</td>
                    <td>@item.State</td>
                    <td>@item.CodeIbge</td>
                    <td>
                        <div class="d-flex flex-column flex-sm-row align-items-sm-center">
                            <button class="btn btn-outline-danger me-2 mb-2 mb-sm-0" style="height: inherit;" @onclick="() => ShowModal(item)">
                                <Icon Name="IconName.Delete" class="me-1" />
                                Delete
                            </button>
                            <button class="btn btn-outline-info" style="height: inherit;" @onclick="() => UpdateAsync(item.CodeIbge)">
                                <Icon Name="IconName.Edit" class="me-1" />
                                Update
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete @_place.City</ModalTitle>
                <button class="btn btn-outline-secondary" @onclick="HideModal"> X </button>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Do you want to delete this location?</FieldLabel>
            </Field>
        </ModalBody>
        <ModalFooter>
            <button class="btn btn-outline-danger me-2 mb-2 mb-sm-0" style="height: inherit;" @onclick="() => DeleteAsync(_place.CodeIbge)">
                <Icon Name="IconName.CheckCircle" class="me-1" /> Confirm
            </button>
        </ModalFooter>
    </ModalContent>
</Modal>

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.BottomEnd" />

@code {
    private string? data;
    private List<Place> _listPlaces = new List<Place>();
    private Place _place = new Place();

    private string? _message;
    SnackbarStack snackbarStack = new SnackbarStack();

    private Modal modalRef = new Modal();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int skip = 0;
            int take = 12;

            var client = new RestClient();
            var request = new RestRequest($"{Endpoint.GetIbges.GetEnumDescription()}?skip={skip}&take={take}");
            _listPlaces = await client.GetAsync<List<Place>>(request);
        }
        catch (Exception)
        {
            _message = "Error loading locations ";
            await snackbarStack.PushAsync(_message, SnackbarColor.Danger);
        }
    }

    public async Task UpdateAsync(string codeIbge)
    {
        await GetByCodeIbgeAsync(codeIbge);

        var jsonBody = JsonSerializer.Serialize(_place);

        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "place", $"{jsonBody}");

        NavigationManager.NavigateTo("/update-ibge", true);
    }

    public async Task DeleteAsync(string codeIbge)
    {
        try
        {
            await GetByCodeIbgeAsync(codeIbge);

            var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "token");

            var client = new RestClient();
            var request = new RestRequest($"{Endpoint.DeleteIbges.GetEnumDescription()}?id={_place.Id}");
            request.AddHeader("Authorization", $"Bearer {token}");

            var response = await client.DeleteAsync(request);

            _message = "Location deleted successfully ";
            await snackbarStack.PushAsync(_message, SnackbarColor.Success);

            NavigationManager.NavigateTo("/ibge", true);
        }
        catch (Exception)
        {
            _message = "Error when deleting locations ";
            await snackbarStack.PushAsync(_message, SnackbarColor.Danger);
        }

    }

    public async Task Search(string data)
    {
        if (string.IsNullOrEmpty(data))
        {
            return;
        }

        if (data.Length == 2)
        {
            await GetByStateAsync(data);
            return;
        }

        if (data.All(char.IsDigit) && data.Length == 7)
        {
            await GetByCodeIbgeAsync(data);
            return;
        }

        await GetByCityAsync(data);
    }

    public async Task GetByCityAsync(string cityName)
    {
        _listPlaces.Clear();

        var client = new RestClient();
        var request = new RestRequest($"{Endpoint.GetIbgesCity.GetEnumDescription()}?city={cityName}");
        _listPlaces = await client.GetAsync<List<Place>>(request);
    }

    public async Task GetByStateAsync(string stateName)
    {
        _listPlaces.Clear();

        var client = new RestClient();
        var request = new RestRequest($"{Endpoint.GetIbgesState.GetEnumDescription()}?state={stateName}");
        _listPlaces = await client.GetAsync<List<Place>>(request);
    }

    public async Task GetByCodeIbgeAsync(string codeIbge)
    {
        _listPlaces.Clear();

        var client = new RestClient();
        var request = new RestRequest($"{Endpoint.GetCodeIbges.GetEnumDescription()}?codeIbge={codeIbge}");
        _place = await client.GetAsync<Place>(request);

        _listPlaces.Add(_place);
    }

    private Task ShowModal(Place item)
    {
        _place = item;
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
}
