@page "/auth"
@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="text-center">
            <h3>Login</h3>
        </div>
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label for="email">Email:</label>
                    <input type="email" class="form-control" @bind="_email">
                </div>
                <div class="form-group">
                    <label for="password">Password:</label>
                    <input type="password" class="form-control" @bind="_password">
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary mt-2" @onclick="CreateAsync">Enter</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    private string? _email;
    private string? _password;

    public async Task CreateAsync()
    {
        if (string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_password))
            return;

        var jsonBody = new
        {
            email = new
            {
                address = _email
            },
            password = _password
        };

        var client = new RestClient();
        var request = new RestRequest($"https://localhost:7122/v1/login").AddJsonBody(jsonBody);
        var response = await client.PostAsync(request);

        if (response.IsSuccessful)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var responseObject = JsonSerializer.Deserialize<AuthResponse>(response.Content, options);

            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "token", responseObject.Token);

            NavigationManager.NavigateTo("/ibge", true);
        }
    }
}
