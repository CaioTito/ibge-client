@page "/register"
@using IbgeClient.Client.Enums
@rendermode InteractiveAuto
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Register</h3>
                    <form>
                        <div class="mb-2">
                            <label for="email"><strong>Email</strong></label>
                            <input type="email" class="form-control" placeholder="Enter your email address" @bind="_email">
                        </div>
                        <div class="text-center">
                            <button type="button" class="btn btn-success mt-2" @onclick="CreateAsync">
                                <Icon Name="IconName.PlusCircle" class="me-1" /> Create Account
                            </button>
                        </div>
                    </form>
                </div>
                @if (_password is not null)
                {
                    <div class="card mt-2">
                        <div class="card-body text-center">
                            <h5 class="card-title">Informações de Senha</h5>
                            <div class="mt-2">Sua senha é <strong>@_password</strong></div>
                        </div>
                    </div>
                }
                <SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.BottomEnd" />
            </div>
        </div>
    </div>
</div>

@code {
    private string? _email;
    private string? _password;

    private string? _message;
    SnackbarStack snackbarStack = new SnackbarStack();

    public async Task CreateAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_email))
                return;

            var jsonBody = new
            {
                email = new
                {
                    address = _email
                }
            };

            var client = new RestClient();
            var request = new RestRequest(Endpoint.Account.GetEnumDescription()).AddJsonBody(jsonBody);
            var response = await client.PostAsync(request);

            if (response.IsSuccessful)
            {
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var responseObject = JsonSerializer.Deserialize<RegisterResponse>(response.Content, options);
                _password = responseObject.Password;

                _message = "User created successfully ";
                await snackbarStack.PushAsync(_message, SnackbarColor.Success);
            }
        }
        catch (Exception)
        {
            _message = "Error creating user ";
            await snackbarStack.PushAsync(_message, SnackbarColor.Danger);
        }      
    }
}
