@page "/ibge"
@rendermode InteractiveAuto

<PageTitle>IBGE</PageTitle>

@if (_listPlaces is null)
{
    <div class="container">
        <div class="form-inline d-flex align-items-center">
            <em>Não foi possivel carregar os dados...</em>
            <button class="btn btn-outline-info m-2" @onclick="OnInitializedAsync">Refresh</button>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="form-inline d-flex align-items-center">
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind="@data">
            <button class="btn btn-outline-success" @onclick="() => Search(data)">Search</button>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>City</th>
                <th>State</th>
                <th>CodeIbge</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _listPlaces)
            {
                <tr>
                    <td>@item.City</td>
                    <td>@item.State</td>
                    <td>@item.CodeIbge</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? data;
    private List<Place> _listPlaces = new List<Place>();
    private Place _place = new Place();

    protected override async Task OnInitializedAsync()
    {
        int skip = 0;
        int take = 15;

        var client = new RestClient();
        var request = new RestRequest($"https://localhost:7122/v1/ibges?skip={skip}&take={take}");
        _listPlaces = await client.GetAsync<List<Place>>(request);
    }

    public async Task Search(string data)
    {
        if (string.IsNullOrEmpty(data))
        {
            return;
        }

        if (data.Length == 2)
        {
            await GetByStateAsync(data);
            return;
        }

        if (data.All(char.IsDigit) && data.Length == 7)
        {
            await GetByCodeIbgeAsync(data);
            return;
        }

        await GetByCityAsync(data);
    }

    public async Task GetByCityAsync(string cityName)
    {
        _listPlaces.Clear();

        var client = new RestClient();
        var request = new RestRequest($"https://localhost:7122/v1/ibges/city?city={cityName}");
        _listPlaces = await client.GetAsync<List<Place>>(request);
    }

    public async Task GetByStateAsync(string stateName)
    {
        _listPlaces.Clear();

        var client = new RestClient();
        var request = new RestRequest($"https://localhost:7122/v1/ibges/state?state={stateName}");
        _listPlaces = await client.GetAsync<List<Place>>(request);
    }

    public async Task GetByCodeIbgeAsync(string codeIbge)
    {
        _listPlaces.Clear();

        var client = new RestClient();
        var request = new RestRequest($"https://localhost:7122/v1/ibges/codeIbge?codeIbge={codeIbge}");
        _place = await client.GetAsync<Place>(request);

        _listPlaces.Add(_place);
    }
}
